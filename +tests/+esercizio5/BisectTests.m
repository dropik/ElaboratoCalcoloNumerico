classdef BisectTests < tests.esercizio5.BaseTestCase
    properties(TestParameter)
        input = { ...
            [ -0.5, 0.5 ], ...
            [-1.5, -0.5 ], ...
            [ 0.5, 1.5 ], ...
            [ -1.1, 0.8], ...
            [ -0.8, 1.1], ...
            [ -1.1, 1.1], ...
            [ -1e-16, 1e-16] ...
        };
    
        expectedRoot = { ...
            0, ...
            -1.047197551196598, ...
            1.047197551196598, ...
            -1.047197551196598, ...
            0, ...
            0, ...
            0 ...
        };
    end
    
    properties(Access = protected)
        assertToleranceAmount = 1e-15;
    end

    methods(Access = protected)
        function [result, iterations] = findRoot(testCase, input)
            [result, iterations] = esercizio5.bisect(...
                testCase.f, ...
                input(1), ...
                input(2), ...
                testCase.inputTolerance ...
            );
        end
    end
    
    methods(Test, ParameterCombination = 'sequential')        
        function testNonNumericA(testCase)
            testCase.assertError( ...
                @() esercizio5.bisect(testCase.f, '0', 1, testCase.inputTolerance), ...
                'inputs:AMustBeNumeric' ...
            );
        end
        
        function testNonNumericB(testCase)
            testCase.assertError( ...
                @() esercizio5.bisect(testCase.f, 0, '1', testCase.inputTolerance), ...
                'inputs:BMustBeNumeric' ...
            );
        end
        
        function testAGraterThanB(testCase)
            testCase.assertError( ...
                @() esercizio5.bisect(testCase.f, 1, 0, testCase.inputTolerance), ...
                'inputs:AMustBeLessThanB' ...
            );
        end
        
        function testAEqualToB(testCase)
            testCase.assertError( ...
                @() esercizio5.bisect(testCase.f, 0, 0, testCase.inputTolerance), ...
                'inputs:AMustBeLessThanB' ...
            );
        end
        
        function testTolLessThanZero(testCase)
            testCase.assertError( ...
                @() esercizio5.bisect(testCase.f, 0, 1, -1), ...
                'inputs:ToleranceMustBePositive' ...
            );
        end
        
        function testTolEqualToZero(testCase)
            testCase.assertError( ...
                @() esercizio5.bisect(testCase.f, 0, 1, 0), ...
                'inputs:ToleranceMustBePositive' ...
            );
        end
        
        function testTolNonNumeric(testCase)
            testCase.assertError( ...
                @() esercizio5.bisect(testCase.f, 0, 1, '1e-10'), ...
                'inputs:ToleranceMustBeNumeric' ...
            );
        end
    end
end