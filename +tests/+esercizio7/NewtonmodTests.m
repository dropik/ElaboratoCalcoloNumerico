classdef NewtonmodTests < tests.esercizio5.WithMaxitTestCase
    properties(TestParameter)
        input = { 0.1, -1.0, 1.0 };
        expectedRoot = { 0, -1.047197551196598, 1.047197551196598 };
    end
    
    properties(Access = protected)
        g = @(x) 6 * cos(3 * x);
        assertToleranceAmount = 1e-15;
    end

    methods(Access = protected)
        function [result, iterations] = findRoot(this, input)
            [result, iterations] = esercizio7.newtonmod(...
                this.f, ...
                this.g, ...
                input, ...
                1, ...
                this.inputTolerance, ...
                this.inputMaxit ...
            );
        end

        function [result, iterations] = findRootWithoutMaxit(this, input)
            [result, iterations] = esercizio7.newtonmod(...
                this.f, ...
                this.g, ...
                input, ...
                1, ...
                this.inputTolerance ...
            );
        end
    end
    
    methods(Test, ParameterCombination = 'sequential')
        function testX0NonNumeric(this)
            this.assertError(...
                @() esercizio7.newtonmod(this.f, this.g, '1', 1, this.inputTolerance, this.inputMaxit), ...
                'inputs:X0MustBeNumeric' ...
            );
        end

        function testRNonNumeric(this)
            this.assertError(...
                @() esercizio7.newtonmod(this.f, this.g, 1, '1', this.inputTolerance, this.inputMaxit), ...
                'inputs:RMustBeNumeric' ...
            );
        end

        function testRLessThanZero(this)
            this.assertError(...
                @() esercizio7.newtonmod(this.f, this.g, 1, -1, this.inputTolerance, this.inputMaxit), ...
                'inputs:RMustBePositive' ...
            );
        end

        function testREqualToZero(this)
            this.assertError(...
                @() esercizio7.newtonmod(this.f, this.g, 1, 0, this.inputTolerance, this.inputMaxit), ...
                'inputs:RMustBeAtLeast1' ...
            );
        end

        function testRNonInteger(this)
            this.assertError(...
                @() esercizio7.newtonmod(this.f, this.g, 1, 0.1, this.inputTolerance, this.inputMaxit), ...
                'inputs:RMustBeInteger' ...
            );
        end
        
        function testToleranceNonNumeric(this)
            this.assertError(...
                @() esercizio7.newtonmod(this.f, this.g, 1, 1, '1e-3', this.inputMaxit), ...
                'inputs:ToleranceMustBeNumeric' ...
            );
        end
        
        function testToleranceLessThanZero(this)
            this.assertError(...
                @() esercizio7.newtonmod(this.f, this.g, 1, 1, -1e-3, this.inputMaxit), ...
                'inputs:ToleranceMustBePositive' ...
            );
        end
        
        function testToleranceEqualToZero(this)
            this.assertError(...
                @() esercizio7.newtonmod(this.f, this.g, 1, 1, 0, this.inputMaxit), ...
                'inputs:ToleranceMustBePositive' ...
            );
        end
        
        function testMaxitNonNumeric(this)
            this.assertError(...
                @() esercizio7.newtonmod(this.f, this.g, 1, 1, this.inputTolerance, '100'), ...
                'inputs:MaxitMustBeNumeric' ...
            );
        end
        
        function testMaxitLessThanZero(this)
            this.assertError(...
                @() esercizio7.newtonmod(this.f, this.g, 1, 1, this.inputTolerance, -100), ...
                'inputs:MaxitMustBePositive' ...
            );
        end
        
        function testMaxitEqualToZero(this)
            this.assertError(...
                @() esercizio7.newtonmod(this.f, this.g, 1, 1, this.inputTolerance, 0), ...
                'inputs:MaxitMustBeAtLeast1' ...
            );
        end
    end
end